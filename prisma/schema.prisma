generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  shadowDatabaseUrl = env("PGURL")
}

// Main Schema
model Technologies {
  id          String @id @default(uuid())
  title       String
  description String
  image       String
}

// About Schema
model About {
  id          String @id @default(uuid())
  title       String
  description String
}

model Experience {
  id          String @id @default(uuid())
  title       String
  description String

}

model Education {
  id          String @id @default(uuid())
  title       String
  description String

}

model Achievements {
  id          String @id @default(uuid())
  title       String
  description String

}

model Skills {
  id          String @id @default(uuid())
  title       String
}

model Hobbies {
  id          String @id @default(uuid())
  title       String  
}

// Project Schema
model Project {
  id          String   @id @default(uuid())
  name        String
  blurb       String?
  description String?
  image       String?
  tags        String []
  createdAt   DateTime @default(now())  

}

// Checkout Schema
model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  price       Int
}

// NextAuth Schema
enum Role {
  ADMIN
  USER
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String? @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}